plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
}

configurations.all {
    resolutionStrategy {
        exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"
    }
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.agobikk.cookeatenjoy"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes.each {
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        /* get it here -> https://spoonacular.com */
        def apiKey = properties.getProperty("API_KEY", "")
        it.buildConfigField "String", "API_KEY", apiKey
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
    packagingOptions {
        resources.excludes.add("META-INF/*")
    }

    flavorDimensions "default"
    productFlavors {
        fake {
            applicationIdSuffix ".fake"
            versionNameSuffix "-fake"
            buildConfigField "String", "TYPE", '"FAKE"'
        }
        real {
            applicationIdSuffix ".real"
            versionNameSuffix "-real"
            buildConfigField "String", "TYPE", '"REAL"'
        }
    }
}

dependencies {

    //default dependencies
    def core_version = "1.7.0"
    def appcompat_version = "1.4.0"
    def material_version = "1.4.0"
    def constraint_layout_version = "2.1.3"
    def legacy_support_version = "1.0.0"
    implementation "androidx.core:core-ktx:$core_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    implementation "androidx.legacy:legacy-support-v4:$legacy_support_version"


    //Navigation
    def nav_version = "2.4.2"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    //preference
    def pref_version = "1.2.0"
    implementation "androidx.preference:preference-ktx:$pref_version"

    //Viewbinding by Kirill Rozov
    def viewBindingDelegate_version = "1.4.7"
    implementation "com.github.kirich1409:viewbindingpropertydelegate:$viewBindingDelegate_version"

    //Glide
    def glide_version = "4.13.0"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"

    //Internet
    def okHttp_version = '4.8.0'
    def retrofit_version = '2.9.0'
    def retrofit_coroutines_version = '0.9.2'
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    //implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$retrofit_coroutines_version"
    implementation "com.squareup.okhttp3:okhttp:$okHttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttp_version"

    //Coroutines
    def coroutines_version = '1.4.1'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    //lifecycle
    def lifecycle_version = '2.4.1'
    def lifecycle_extensions_version = '2.2.0'
    def activity_ktx_version = '1.4.0'
    def fragment_ktx_version = '1.4.1'
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_extensions_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_ktx_version"


    //ROOM
    def room_version = '2.4.2'
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    //splashScreen
    def splashscreen_version = '1.0.0-beta02'
    implementation "androidx.core:core-splashscreen:$splashscreen_version"

    //Timber+Logger for Log
    def timber_version = '5.0.1'
    implementation "com.jakewharton.timber:timber:$timber_version"
    def logger_version = '2.2.0'
    implementation "com.orhanobut:logger:$logger_version"

    //gson
    def gson_version = '2.9.0'
    implementation "com.google.code.gson:gson:$gson_version"

    //dagger
    def dagger_version = '2.42'
    def assisted_dagger_inject_version = '0.5.2'
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    compileOnly "com.squareup.inject:assisted-inject-annotations-dagger2:$assisted_dagger_inject_version"
    kapt "com.squareup.inject:assisted-inject-processor-dagger2:$assisted_dagger_inject_version"

    //Kaspresso
    def kaspresso_latest_version = "1.4.1"
    androidTestImplementation "com.kaspersky.android-components:kaspresso:$kaspresso_latest_version"
    // Allure support
    androidTestImplementation "com.kaspersky.android-components:kaspresso-allure-support:$kaspresso_latest_version"
    // Jetpack Compose support
    androidTestImplementation "com.kaspersky.android-components:kaspresso-compose-support:$kaspresso_latest_version"

    def fragment_version = "1.4.1"
    debugImplementation("androidx.fragment:fragment-testing:$fragment_version")

    //Espresso
    def espresso_version = "3.3.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$espresso_version"

    //Mockito
    def mockito_latest_version = "4.1.0"
    def nhaarman_mockito_latest_version = "1.5.0"
    testImplementation "org.mockito:mockito-core:$mockito_latest_version"
    testImplementation "org.mockito:mockito-inline:$mockito_latest_version"
    testImplementation("com.nhaarman:mockito-kotlin:$nhaarman_mockito_latest_version") {
        exclude group: 'org.jetbrains.kotlin'
        exclude group: 'org.mockito'
    }

    //Testing
    def core_testing_version = "2.1.0"
    def junit_version = "4.13.2"
    def ext_junit_version = "1.1.3"
    testImplementation "androidx.arch.core:core-testing:$core_testing_version"
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$ext_junit_version"
//    testImplementation 'org.junit.platform:junit-platform-commons:1.8.1'
//    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
//    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

}
//tasks.withType(Test) {
//    useJUnitPlatform()
//}

